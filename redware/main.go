package main

import (
	"fmt"
	"io/fs"
	"log"
	"os"

	"github.com/Redhead92/redcrypt"
)

const BlockSize = 16

func keygen() {
//Use key in smart way to encrypt file
}

func main() {
	testfolder := "C:/Users/super/desktop/test/"
	testkey := "6368616e676520746869732070617373"
	// walking system functions
	folder := os.DirFS(testfolder)
	fs.WalkDir(folder, ".", func(path string, info fs.DirEntry, err error) error{
		if err != nil{
			log.Fatal(err)
		}
		fmt.Println(os.Getwd())
		fmt.Printf("Encrypting %v", path)
		fileinfo, err := os.Stat(testfolder + path)
		if err != nil{
			log.Fatal(err)
		}
		// skip dirs
		if fileinfo.IsDir(){
			
		}else{
				plainFile, err := os.ReadFile(testfolder + path)
				if err != nil{
					log.Fatalf("error %v reading file %v", err.Error(), plainFile)
				}
			// Encrypt new file
				ciphertext := redcrypt.Redcrypt(testkey,[]byte (plainFile))
				fmt.Printf("%x\n", ciphertext)
			}
		return nil
	})
	//Encrypt folder function
	

	// multi-threading?
}


