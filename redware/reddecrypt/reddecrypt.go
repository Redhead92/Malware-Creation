package reddecrypt

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"fmt"
	"os"
)

const BlockSize = 16

func check (e error){
	if e != nil{
		panic(e)
	}
}

func Reddecrypt(file string, key string)[]byte {
	keybytes := []byte(key)
	//check keysize?

	// read file
	cryptfile,err := os.ReadFile(file)
	check(err)
	//Block
	block, err := aes.NewCipher(keybytes)
	if err != nil {
		panic(err)
	}

	iv := cryptfile[:aes.BlockSize]
	cipherbytes := cryptfile[aes.BlockSize:]

	// CBC mode always works in whole blocks.
	if len(cipherbytes)%aes.BlockSize != 0 {
		panic("ciphertext is not a multiple of the block size")
	}

	plaintextbytes := make([]byte, len(cipherbytes))
	mode := cipher.NewCBCDecrypter(block, iv)
	mode.CryptBlocks(plaintextbytes, cipherbytes)

	// Depadding
	depadbytes := bytes.ReplaceAll(plaintextbytes,[]byte("A"),nil)
	fmt.Printf("Decrypted text: , %s\n", depadbytes)
	return depadbytes
}