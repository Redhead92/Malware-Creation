package redcrypt

import (
	"crypto/aes"
	"crypto/cipher"
	"fmt"
	"os"
	"regexp"
)

func Reddecrypt(file string, key string) {
	keybytes := []byte(key)
	// read file
	cryptfile,err := os.ReadFile(file)
	check(err)
	//Block
	block, err := aes.NewCipher(keybytes)
	if err != nil {
		panic(err)
	}

	iv := cryptfile[:aes.BlockSize]
	cipherbytes := cryptfile[aes.BlockSize:]

	// CBC mode always works in whole blocks.
	if len(cipherbytes)%aes.BlockSize != 0 {
		panic("ciphertext is not a multiple of the block size")
	}

	plaintextbytes := make([]byte, len(cipherbytes))
	mode := cipher.NewCBCDecrypter(block, iv)
	mode.CryptBlocks(plaintextbytes, cipherbytes)

	// Depadding plaintext
	rp := regexp.MustCompile(`(A*$)`)
	depadbytes:= []byte(rp.ReplaceAllString(string(plaintextbytes),""))

	//Extract file info
	r := regexp.MustCompile(`((\w{1}\:{1}\/{1}(.*))([\.])(.*)$)`)
	orFilename := r.FindString(string(depadbytes))
	orFile, err := os.Create(orFilename)
	check(err)
	defer orFile.Close()

	// Delete cipher file
	orFile.Write(depadbytes[:len(depadbytes) - len(orFilename)])
	fmt.Printf("Decrypted file: , %s\n", file)
}